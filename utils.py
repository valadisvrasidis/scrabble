"""
Αρχείο με βοηθητικές συναρτήσεις για να είναι ο κώδικας πιο εύκολος στην κατανόηση
"""
import itertools
import json

def findsubsets(s, n):
    """
    Η συνάρτηση αυτή βρίσκει όλα τα δυνατά υποσύνολα για κάποια μέθοδο για μια λίστα πραγμάτων (powerset).
    Είσοδος: Μια λίστα και το μέγεθος των συνόλων που θέλουμε σαν έξοδο
    Έξοδος: Μια λίστα το powerset της λίστας εισόδου για το μέγεθος που δώθηκε
    Για παράδειγμα με είσοδο την λίστα [1,2,3,4] και μέγεθος 2 θα επιστρέψει τις τούπλες (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4).
    Αλλά δεν θα επιστρέψει και το (2, 1) που είναι αντιμετάθεση τις (1, 2).
    """
    return list(itertools.combinations(s, n))

def findrearranges(s):
    """
    Η συνάρτηση αυτή επιστρέφει όλες τις δυνατές αντιμεταθέσεις των στοιχείων μιας λίστας.
    Είσοδος: Μια λίστα
    Έξοδος: Μια λίστα με όλες τις δυνατές αντιμεταθέσεις των στοιχείων τις λίστας
    Για παράδειγμα με είσοδο την λίστα: [1,2,3] όλες οι δυνατές αντιμεταθέσεις της είναι: [1, 2, 3], [3, 2, 1], [1, 3, 2], [3, 1, 2], [2, 3, 1], [2, 1, 3]
    """
    return list(itertools.permutations(s))


# Συναρτήσεις για το δίαβασμα και την εγγραφή json αρχείων
def load_json(filename):
    """
    Η συνάρτηση αυτή φορτώνει τα δεδομένα ενός json αρχείου
    Είσοδος: το path ενός json αρχείου
    Έξοδος: Τα δεδομένα που περιέχονται στο αρχείο
    """
    with open(filename, "r") as f:
        return json.load(f)

def save_json(data, filename):
    """
    Η συνάρτηση αυτή αποθηκεύει μια μεταβλητή σε ένα json αρχείο
    Είσοδος: μια μεταβλητή με δεδομένα και το path ενός json αρχείου στο όποιο θα αποθηκευτεί
    Έξοδος: Κενό
    """
    with open(filename, 'w') as f:
        json.dump(data, f)



def print_statistics(filename):
    """
    Η συνάρτηση αυτή τυπώνει τα στατιστικά των παιχνιδιών
    Είσοδος: Το path ενός json αρχείου
    Έξοδος: Κενό (αλλά τυπώνει δεδομένα στο stdoutput)
    """
    data = load_json(filename) # αρχικά φορτώνουμε τα δεδομένα του αρχείου
    print ("************************* Στατιστικά *************************")
    print ("-----------------------------------------------------------")


    print (f"➼Συνολικά έχουν παιχτεί: {len(data)}") # τυπώνουμε πόσα παιχνίδια έχουμε παιχτεί συνολικά
    d = len([i for i in data if i["human_score"] > i["computer_score"]]) # τα παιχνίδια που έχει κερδίσει ο άνθρωπος είναι αυτά που το σκορ του ήταν μεγαλύτερο από αυτό του υπολογιστή
    print (f"➼Ο άνθρωπος έχει κερδίσει σε: {d} παιχνίδια") # σε πόσα παιχνίδια έχει κερδίσει ο άνθρωπος

    max_games = len([i for i in data if i["computer_method"] == "max"]) # πόσα παιχνίδια έχουν παιχτεί με max αλγόριθμο
    min_games = len([i for i in data if i["computer_method"] == "min"]) # πόσα με min
    smart_games = len([i for i in data if i["computer_method"] == "smart"]) # και πόσα με max

    if min_games != 0: # αν ο αριθμός των παιχνίδιων με min αλγόριθμο είναι διαφορετικά του μηδενός
        d = len([i for i in data if i["human_score"] > i["computer_score"] and i["computer_method"] == "min"]) / min_games * 100
        d = round(d, 3) # στρογγυλοποιούμε τον ποσό
        print (f"➼Με τον αλγόριθμο min ο άνθρωπος έχει κερδίσει το: {d}% των παιχνιδιών, ενώ ο υπολογιστής το {100 - d}%.")

    if max_games != 0: # αντίστοιχα και για τa παιχνίδια με το max αλγόριθμο
        d = len([i for i in data if i["human_score"] > i["computer_score"] and i["computer_method"] == "max"]) / max_games * 100
        d = round(d, 3)
        print (f"➼Με τον αλγόριθμο max ο άνθρωπος έχει κερδίσει το: {d}% των παιχνιδιών, ενώ ο υπολογιστής το {100 - d}%.")

    if smart_games != 0: # αλλα και τον smart
        d = len([i for i in data if i["human_score"] > i["computer_score"] and i["computer_method"] == "smart"]) / smart_games * 100
        d = round(d, 3)
        print (f"➼Με τον αλγόριθμο smart ο άνθρωπος έχει κερδίσει το: {d}% των παιχνιδιών, ενώ ο υπολογιστής το {100 - d}%.")

    # αφού τυπώσουμε τα μηνύματα αυτά
    d = mean([i["human_score"] for i in data]) # βρίσκουμε τον μέσο όρο του σκορ του παίχτη
    print (f"➼Το μέσο σκορ παρτίδων του Ανθρώπου είναι: {round(d, 3)}") # το τυπώνουμε αφού το στρογγυλοποιήσουμε
    d = mean([i["computer_score"] for i in data]) # το ίδιο και για το σκορ του υπολογιστή
    print (f"➼Το μέσο σκόρ του Η/Υ είναι: {round(d, 3)}")

    # τέλος τυπώνουμε και τον μέσο όρο των παρτίδων ανά  παιχνίδι
    d = mean([i["turns"] for i in data])
    print (f"➼Ο μέσος αριθμός κινήσεων είναι: {round(d, 3)}")
    print ("-----------------------------------------------------------")


def mean(l):
    """
    Η συνάρτηση αυτή επιστρέφει τον μέσο όσο των στοιχείων μιας λίστας
    Είσοδος: Μια λίστα
    Έξοδος: Ο μέσος όρος ή UND αν η λίστα είναι κενη
    """
    if len (l) == 0:
        return "UND"
    return sum(l) / len(l)
